// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: aggchain.proto

package aggchain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AggchainProofService_GenerateAggchainProof_FullMethodName = "/aggchain.AggchainProofService/GenerateAggchainProof"
)

// AggchainProofServiceClient is the client API for AggchainProofService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for generating aggchain proof.
type AggchainProofServiceClient interface {
	GenerateAggchainProof(ctx context.Context, in *GenerateAggchainProofRequest, opts ...grpc.CallOption) (*GenerateAggchainProofResponse, error)
}

type aggchainProofServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggchainProofServiceClient(cc grpc.ClientConnInterface) AggchainProofServiceClient {
	return &aggchainProofServiceClient{cc}
}

func (c *aggchainProofServiceClient) GenerateAggchainProof(ctx context.Context, in *GenerateAggchainProofRequest, opts ...grpc.CallOption) (*GenerateAggchainProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateAggchainProofResponse)
	err := c.cc.Invoke(ctx, AggchainProofService_GenerateAggchainProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggchainProofServiceServer is the server API for AggchainProofService service.
// All implementations must embed UnimplementedAggchainProofServiceServer
// for forward compatibility.
//
// Service for generating aggchain proof.
type AggchainProofServiceServer interface {
	GenerateAggchainProof(context.Context, *GenerateAggchainProofRequest) (*GenerateAggchainProofResponse, error)
	mustEmbedUnimplementedAggchainProofServiceServer()
}

// UnimplementedAggchainProofServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggchainProofServiceServer struct{}

func (UnimplementedAggchainProofServiceServer) GenerateAggchainProof(context.Context, *GenerateAggchainProofRequest) (*GenerateAggchainProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAggchainProof not implemented")
}
func (UnimplementedAggchainProofServiceServer) mustEmbedUnimplementedAggchainProofServiceServer() {}
func (UnimplementedAggchainProofServiceServer) testEmbeddedByValue()                              {}

// UnsafeAggchainProofServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggchainProofServiceServer will
// result in compilation errors.
type UnsafeAggchainProofServiceServer interface {
	mustEmbedUnimplementedAggchainProofServiceServer()
}

func RegisterAggchainProofServiceServer(s grpc.ServiceRegistrar, srv AggchainProofServiceServer) {
	// If the following call pancis, it indicates UnimplementedAggchainProofServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggchainProofService_ServiceDesc, srv)
}

func _AggchainProofService_GenerateAggchainProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAggchainProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggchainProofServiceServer).GenerateAggchainProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggchainProofService_GenerateAggchainProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggchainProofServiceServer).GenerateAggchainProof(ctx, req.(*GenerateAggchainProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggchainProofService_ServiceDesc is the grpc.ServiceDesc for AggchainProofService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggchainProofService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggchain.AggchainProofService",
	HandlerType: (*AggchainProofServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAggchainProof",
			Handler:    _AggchainProofService_GenerateAggchainProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggchain.proto",
}
